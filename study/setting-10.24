import pandas as pd
from pandas import DataFrame
from pandas import Series
import numpy as np
import re
#索引上的合并
left1=DataFrame({'key':['a','b','a','a','b','c'],'value':range(6)})
right1=DataFrame({'group_val':[3.5,7]},index=['a','b'])
pd.merge(left1,right1,left_on='key',right_index=True)
'''key  value  group_val
0   a      0        3.5
2   a      2        3.5
3   a      3        3.5
1   b      1        7.0
4   b      4        7.0'''
#包含不符合右边的条件的，用NA表示
pd.merge(left1,right1,left_on='key',right_index=True,how='outer')
'''  key  value  group_val
0   a      0        3.5
2   a      2        3.5
3   a      3        3.5
1   b      1        7.0
4   b      4        7.0
5   c      5        NaN'''

#轴向连接，默认是axis=0横向添加，axis=1列向添加
arr=np.arange(12).reshape((3,4))
np.concatenate([arr,arr],axis=1)
np.concatenate([arr,arr])
#三个没有重叠索引Serice
s1=Series([0,1],index=['a','b'])
s2=Series([2,3,4],index=['c','d','e'])
s3=Series([5,6],index=['f','g'])
s4=pd.concat([s1*5,s3],axis=1)
pd.concat([s1,s4],axis=1,join='inner')

#合并重叠数据
df1=DataFrame({'a':[1,np.nan,5,np.nan],'b':[2,9,3,5]})
df2=DataFrame({'a':[2,4,np.nan,46,6],'b':[2,4,np.nan,5,3]})
df1.combine_first(df2)
'''      a    b
0   1.0  2.0
1   4.0  9.0
2   5.0  3.0
3  46.0  5.0
4   6.0  3.0
'''
#数据转换删除重复出现的项，标号跟随之间
data=DataFrame({'k1':['one']*3+['two']*4,'k2':[1,2,1,3,4,4,6]})
data.drop_duplicates()
'''    k1  k2
0  one   1
1  one   2
3  two   3
4  two   4
6  two   6
'''
#替换值
data1=Series([1,-999,213,32,34])
data1.replace([-999,32],[np.nan,0])
data1.replace({-999:np.nan,32:0})

#离散化和面元划分
age=[10,23,43,21,45,22,80,100]
bins=[0,18,30,60,100]
cats=pd.cut(age,bins,right=True)
#print(cats)
'''4, interval[int64]): [(0, 18] < (18, 30] < (30, 60] < (60, 100]]'''
pd.value_counts(cats)
'''(18, 30]     3
(60, 100]    2
(30, 60]     2
(0, 18]      1'''
#检测和过滤异常值
np.random.seed(12345)
data2=DataFrame(np.random.randn(1000,4))
data2.describe()
'''                 0            1            2            3
count  1000.000000  1000.000000  1000.000000  1000.000000
mean     -0.067684     0.067924     0.025598    -0.002298
std       0.998035     0.992106     1.006835     0.996794
min      -3.428254    -3.548824    -3.184377    -3.745356
25%      -0.774890    -0.591841    -0.641675    -0.644144
50%      -0.116401     0.101143     0.002073    -0.013611
75%       0.616366     0.780282     0.680391     0.654328
max       3.366626     2.653656     3.260383     3.927528'''
data2[(np.abs(data2)>3).any(1)]#全部中超过-3或者3的值
'''            0         1         2         3
5   -0.539741  0.476985  3.248944 -1.021228
97  -0.774363  0.552936  0.106061  3.927528
102 -0.655054 -0.565230  3.176873  0.959533
305 -2.315555  0.457246 -0.025907 -3.399312
324  0.050188  1.951312  3.260383  0.963301
400  0.146326  0.508391 -0.196713 -3.745356
499 -0.293333 -0.242459 -3.056990  1.918403
523 -3.428254 -0.296336 -0.439938 -0.867165
586  0.275144  1.179227 -3.184377  1.369891
808 -0.362528 -3.548824  1.553205 -2.186301
900  3.366626 -2.372214  0.851010  1.332846
'''
#正则表达式
text='Dave dave@google.com ' \
     'Steve steve@gmail.com ' \
     'Rob rob@yahoo.com'
pattern=r'[A-Z0-9._%+-]+@[A-Z0-9.-]+.\[A-Z]{2,4}'
regex=re.compile(pattern,flags=re.IGNORECASE)
print(regex)
print(regex.findall(text))
